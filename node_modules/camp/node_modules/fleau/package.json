{
  "name": "fleau",
  "main": "fleau.js",
  "description": "An extensible, readable, streamed, safe templating language.",
  "author": {
    "name": "Thaddee Tyl",
    "email": "thaddee.tyl@gmail.com",
    "url": "http://espadrine.github.com/"
  },
  "contributors": [
    {
      "name": "Thaddee Tyl",
      "email": "thaddee.tyl@gmail.com"
    },
    {
      "name": "Jan Keromnes",
      "email": "janx@linux.com"
    }
  ],
  "version": "13.04.27",
  "homepage": "http://espadrine.github.com/fleau/",
  "repository": {
    "type": "git",
    "url": "git://github.com/espadrine/fleau.git"
  },
  "scripts": {
    "test": "make test"
  },
  "dependencies": {
    "localeval": ">=13.04.14"
  },
  "devDependencies": {},
  "optionalDependencies": {},
  "engines": {
    "node": ">=0.4.0"
  },
  "readmeFilename": "README.md",
  "readme": "# Fléau [![Build Status](https://travis-ci.org/espadrine/fleau.png)](http://travis-ci.org/espadrine/fleau)\n\n*An extensible, readable, streamed, safe templating language.*\n\n# Taste\n\nImport and use.\n\n    var fleau = require('fleau');\n    var fs = require('fs');\n    fleau(fs.createReadStream('./YourTemplateFile'),   // input\n          process.stdout,                              // output\n          {data: 'to use', \"in\": ['your', 'file']});   // data\n\nExample templates.\n\n    Thaddee {{if {{apostles.indexOf(thaddee) != -1}}\n              then was else wasn\\'t}} an apostle\n\n    {\n      thaddee:  'Thaddaeus',\n      apostles: ['Simon','Andrew','James','John','Philip','Bartholomew',\n                 'Matthew','Thomas','James','Simon','Judas','Judas']\n    }\n\n    Thaddee wasn\\'t an apostle\n\nLoops:\n\n    Characters:\n    {{for i, guy in protagonists\n    {{ {{= i in plain}}. {{= guy in plain}}\n    }} }}\n\n    {\n      protagonists: ['Blondie', 'Angel', 'Tuco']\n    }\n\n    Characters:\n     0. Blondie\n     1. Angel\n     2. Tuco\n\n\n# Manual\n\n## Exports\n\nThe exported object is a function that takes four parameters:\n\n    fleau(inputStream,         // a template\n          outputStream,        // where to output the result\n          {data: 'to use'},    // parameters\n          function callback(error) {…});\n\nEach parameter is accessible as a variable in the template. More on that later.\n\nThis exported function also has a series of entries.\n\n- `fleau.macros` is a map of all macro functions. A *macro* is what specifies\n  what the control zone does (more on this below). This is exported for\n  extensibility purposes.\n- `fleau.parsers` is a map of all parser functions. Parsers are used in the `=`\n  macro (it prints data from the parameters).\n- `fleau.formatString(input :: String, write :: Function, literal :: Object)`\n  formats the `input` parameter as a template, using the `write` function to\n  write data to the output stream. The `literal` object is the `parameters`\n  passed to the function.\n  This function is exported for use in macros.\n- `fleau.eval(literal :: Object, expression :: String)` returns the value\n  corresponding to looking up (or evaluating) an expression in the context of\n  the literal object passed in as parameters to the template.\n  This function is exported for use in macros.\n- `fleau.options` contains a field, `trigger`, which allows you to set what\n  trigger you want, instead of the default `#`, to introduce a control zone.\n\n## Macros\n\nIn a *control zone* (a zone in the template between `#{` and `}`), you have a\nseries of textual parameters, either delimited by whitespace, or by `#{…}`.\nThe first of those paramters selects a macro.\n*Macros* contain instructions to output data in the template.\nThe following are built-in macros.\n\nThe `=` macro displays an expression and escapes it using a parser.\n\n    Here be dragons: {{= data in {{json 2}} }}.\n\n    { data: ['T-O Psalter world map', 'Borgia map', 'Fra Mauro Map'] }\n\n    Here be dragons: ['T-O Psalter world map', 'Borgia map', 'Fra Mauro Map'].\n\nYou can have parameters to parsers (more below), and you can also chain them\nusing a sequence of `in parser` instructions.\n\nConditions: the `if` macro.\n\n    I am {{if here then {{here. Hello!}} else if atWork then\n    {{at work…}} else out.}} Anyway, how do you do?\n\n    { here: false, atWork: true }\n\n    I am at work… Anyway, how do you do?\n\n(You can have as many `else if` as you want.)\n\nLoops: the `for` macro. You have two forms: with the index, and without.\nWe have already seen with the index in the intro.\n\n    Characters:\n    {{for guy in protagonists\n    {{- {{= guy in plain}}\n    }} }}\n\n    {\n      protagonists: ['Blondie', 'Angel', 'Tuco']\n    }\n\n    Characters:\n    - Blondie\n    - Angel\n    - Tuco\n\nThe comment macro, `#`, used if you want to disable a control zone without\nremoving it.\n\n    Here be {{# nothing}}\n\n    {}\n\n    Here be\n\nFinally, the macro macro, `!`, which adds a macro on-the-fly.\nIt reads the first parameter of the macro as a new macro name, and the second\nparameter as the body of a function expression to which the macro will be bound.\nIt feeds it three parameters, `write`, a function to which you can give the\noutput, `literal`, the parameters given to the template, and `params`, the\nparameters given to the macro.\n\n    First param:{{! fp {{write (params[0])}} }} {{fp teh yep etc…}}!\n\n    {}\n\n    First param: teh!\n\n## Parsers\n\n- `plain`: nothing is escaped.\n- `html`: HTML escapes (such as `<`, `>, `&`, etc.).\n- `xml`: similar to HTML.\n- `xmlattr`: escapes for an XML attribute (such as `'` to `&apos;`).\n- `jsonstring`: inside a JS (or JSON) string, escapes `'`, `\\`, etc.\n- `json`: outputs a JSON representation of the input. This parser has the usual\n  parameters given to `JSON.stringify`.\n- `uri`: escapes spaces to `%20`, etc, as done in URIs.\n- `!uri`: unescapes URIs.\n- `integer`: outputs the data as an integer.\n- `intradix`: outputs an integer using the radix given as a parameter.\n- `float`: outputs a floating-point number using the number of digits after the\n  comma as given as a parameter.\n- `exp`: outputs a number in scientific notation, using the number of digits\n  after the comma as given as a parameter.\n\n# Dev intro\n\nThe entirety of the templating system is hold in the `fleau.js` code file. There\nare tests in the `test/` directory, which you run using `make test`.\n\n`fleau.js` starts with a series of helper functions which are really meant to\nwork together. The main data structures, `ControlZone` and `TopLevel`, contain\nall information about the location of control zones and escapes in and out of\nthem.\n\nThe data is constructed by the `toplevel` function. It doesn't do any string\nmanipulation; it only stores the indices of interesting spots. It is applied not\nto the whole document, but to the start of the template until the end of the\nfirst control zone it finds. That way, data starts being sent down the wire long\nbefore all the document has been processed, which is useful in huge documents.\n\nQuite obviously, the `zoneParser` function operates on each control zone and\nseparates it into space-separated tokens, or longer phrases. Then, `escapeCurly`\nsubstitutes escapes to their corresponding output.\n\nThe `format` function is obviously the main entry point, and the main thing it\ndoes is call `formatString`, giving it the complete contents of the template.\nIn turn, `formatString` reads each control zone sequentially, and calls the\ncorresponding macro every time.\n\nAll macros are in the `macros` map; each macro name is associated to the macro\nfunction. Similarly, parsers are in the `parsers` map; each parser name is\nassociated to the corresponding parser function, which is given the text to\nparse and optional parser parameters.\n\nOne last thing. If you are wondering about the peculiar code style, it is an\nexperiment in readability. Put a space between the function and the parameter\nlist if you want to contribute.\n\n# License\n\nLGPL, see LICENSE.\n",
  "_id": "fleau@13.04.27",
  "_from": "fleau@>=13.04.27"
}
