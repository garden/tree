{
  "name": "localeval",
  "main": "localeval.js",
  "description": "A sandboxed eval().",
  "author": {
    "name": "Thaddee Tyl",
    "email": "thaddee.tyl@gmail.com",
    "url": "http://espadrine.github.com/"
  },
  "contributors": [
    {
      "name": "Thaddee Tyl",
      "email": "thaddee.tyl@gmail.com"
    }
  ],
  "version": "13.06.10",
  "homepage": "http://espadrine.github.com/localeval/",
  "repository": {
    "type": "git",
    "url": "git://github.com/espadrine/localeval.git"
  },
  "dependencies": {},
  "devDependencies": {},
  "optionalDependencies": {},
  "engines": {
    "node": ">=0.4.0"
  },
  "readmeFilename": "readme.md",
  "readme": "# Local Eval\n\nEvaluate a string of JS code without access to the global object.\n\nAlways use that instead of `eval()`. Always.\n\nAPI:\n\n    localeval(code :: String, sandbox :: Object) :: Object.\n\n    localeval(code :: String,    sandbox :: Object,\n              timeout :: Number, cb :: Function)\n\nThe `code` is a string of JS code. The `sandbox` contains objects which are\ngoing to be accessible in the JS code.\nIt returns the last evaluated piece of JS code in `code`, if no timeout is\ngiven. Otherwise, the callback gives that result as a parameter.\n\nNode example:\n\n```javascript\nvar localeval = require('localeval');\nlocaleval('console.log(\"Do I have access to the console?\")');  // Throws.\n```\n\nBrowser example:\n\n```html\n<!doctype html><title></title>\n<script src='localeval.js'></script>\n<!-- Alerts \"32\". -->\n<script> alert(localeval('a + b', {a: 14, b: 18})) </script>\n```\n\nYou may find an example of use in browser code in `main.html`.\n\n# Warning\n\nIf no timeout is given, it doesn't protect your single-threaded code against\ninfinite loops.\n\nThat said, it protects against any security leak.\n\n1. All local and global variables are inaccessible.\n\n2. Variables defined while evaluating code don't pollute any scope.\n\n3. Evaluated code cannot fiddle with global object's properties.\n   Think\n   `localeval('([]).__proto__.push = function(a) { return \"nope\"; }')`.\n\n# Purpose\n\nTrying to find a reasonable cross-environment ES5 sandbox evaluation function.\n",
  "_id": "localeval@13.06.10",
  "_from": "localeval@>=13.04.14"
}
